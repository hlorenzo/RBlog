ds <- matrix(NA,length(ls),2)
ns <- rep(NA,length(ls))
mod0 <- getDs(M,0)
D0<-mod0$comps
D0_m<-solve(mod0$comps)
plot(c(0),c(0),xlim=c(0,1),ylim=c(0,1),col="white")
abline(h=0,v=0)
for(li in 1:length(ls)){
l <- ls[li]
mod <- getDs(M,l)
ds[li,] <- mod$d
ns[li] <- mod$n1
mod <- getDs(M,l)
D_in0 <- abs(mod$comps%*%D0_m)
points(D_in0[,1],D_in0[,2],pch=16)
}
M
plot(ls,ns)
M<- matrix(c(0.635,0.63,0.001,0.6,0.1,0.004,0.230,sqrt(0.9^2+0.89^2)/1.9-0.04,0.03,0.61),byrow = T,nrow = 2)
getDs <- function(M0,l){
M <- abs(M0) - l
M[which(M<0)] <- 0
M <- sign(M0)*M
pos0 <- which(svd(M)$v[,1]!=0)
L00 <- 0
if(length(pos0)>0){
L00 <- length(pos0)
}
list(d=svd(M)$d,n1=L00,comps=M%*%svd(M)$v,M=M)
}
ls <- seq(0,1,length.out = 10000)
ds <- matrix(NA,length(ls),2)
ns <- rep(NA,length(ls))
mod0 <- getDs(M,0)
D0<-mod0$comps
D0_m<-solve(mod0$comps)
plot(c(0),c(0),xlim=c(0,1),ylim=c(0,1),col="white")
abline(h=0,v=0)
for(li in 1:length(ls)){
l <- ls[li]
mod <- getDs(M,l)
ds[li,] <- mod$d
ns[li] <- mod$n1
mod <- getDs(M,l)
D_in0 <- abs(mod$comps%*%D0_m)
points(D_in0[,1],D_in0[,2],pch=16)
}
M
plot(ls,ns)
M<- matrix(c(0.635,0.63,0.001,0.6,0.1,0.004,0.230,sqrt(0.9^2+0.89^2)/1.8-0.04,0.03,0.61),byrow = T,nrow = 2)
getDs <- function(M0,l){
M <- abs(M0) - l
M[which(M<0)] <- 0
M <- sign(M0)*M
pos0 <- which(svd(M)$v[,1]!=0)
L00 <- 0
if(length(pos0)>0){
L00 <- length(pos0)
}
list(d=svd(M)$d,n1=L00,comps=M%*%svd(M)$v,M=M)
}
ls <- seq(0,1,length.out = 10000)
ds <- matrix(NA,length(ls),2)
ns <- rep(NA,length(ls))
mod0 <- getDs(M,0)
D0<-mod0$comps
D0_m<-solve(mod0$comps)
plot(c(0),c(0),xlim=c(0,1),ylim=c(0,1),col="white")
abline(h=0,v=0)
for(li in 1:length(ls)){
l <- ls[li]
mod <- getDs(M,l)
ds[li,] <- mod$d
ns[li] <- mod$n1
mod <- getDs(M,l)
D_in0 <- abs(mod$comps%*%D0_m)
points(D_in0[,1],D_in0[,2],pch=16)
}
M
plot(ls,ns)
M<- matrix(c(0.63,0.21,0.001,0.6,0.1,0.004,0.230,0.65,0.03,0.61),byrow = T,nrow = 2)
getDs <- function(M0,l){
M <- abs(M0) - l
M[which(M<0)] <- 0
M <- sign(M0)*M
pos0 <- which(svd(M)$v[,1]!=0)
L00 <- 0
if(length(pos0)>0){
L00 <- length(pos0)
}
list(d=svd(M)$d,n1=L00,comps=M%*%svd(M)$v,M=M)
}
ls <- seq(0,1,length.out = 10000)
ds <- matrix(NA,length(ls),2)
ns <- rep(NA,length(ls))
mod0 <- getDs(M,0)
D0<-mod0$comps
D0_m<-solve(mod0$comps)
plot(c(0),c(0),xlim=c(0,1),ylim=c(0,1),col="white")
abline(h=0,v=0)
for(li in 1:length(ls)){
l <- ls[li]
mod <- getDs(M,l)
ds[li,] <- mod$d
ns[li] <- mod$n1
mod <- getDs(M,l)
D_in0 <- abs(mod$comps%*%D0_m)
points(D_in0[,1],D_in0[,2],pch=16)
}
M
plot(ls,ns)
matplot(ls,ds,type="l")
M<- matrix(c(0.67,0.21,0.001,0.6,0.1,0.004,0.230,0.65,0.03,0.61),byrow = T,nrow = 2)
getDs <- function(M0,l){
M <- abs(M0) - l
M[which(M<0)] <- 0
M <- sign(M0)*M
pos0 <- which(svd(M)$v[,1]!=0)
L00 <- 0
if(length(pos0)>0){
L00 <- length(pos0)
}
list(d=svd(M)$d,n1=L00,comps=M%*%svd(M)$v,M=M)
}
ls <- seq(0,1,length.out = 10000)
ds <- matrix(NA,length(ls),2)
ns <- rep(NA,length(ls))
mod0 <- getDs(M,0)
D0<-mod0$comps
D0_m<-solve(mod0$comps)
plot(c(0),c(0),xlim=c(0,1),ylim=c(0,1),col="white")
abline(h=0,v=0)
for(li in 1:length(ls)){
l <- ls[li]
mod <- getDs(M,l)
ds[li,] <- mod$d
ns[li] <- mod$n1
mod <- getDs(M,l)
D_in0 <- abs(mod$comps%*%D0_m)
points(D_in0[,1],D_in0[,2],pch=16)
}
M
plot(ls,ns)
matplot(ls,ds,type="l")
M<- matrix(c(0.68,0.21,0.001,0.6,0.1,0.004,0.230,0.65,0.03,0.61),byrow = T,nrow = 2)
getDs <- function(M0,l){
M <- abs(M0) - l
M[which(M<0)] <- 0
M <- sign(M0)*M
pos0 <- which(svd(M)$v[,1]!=0)
L00 <- 0
if(length(pos0)>0){
L00 <- length(pos0)
}
list(d=svd(M)$d,n1=L00,comps=M%*%svd(M)$v,M=M)
}
ls <- seq(0,1,length.out = 10000)
ds <- matrix(NA,length(ls),2)
ns <- rep(NA,length(ls))
mod0 <- getDs(M,0)
D0<-mod0$comps
D0_m<-solve(mod0$comps)
plot(c(0),c(0),xlim=c(0,1),ylim=c(0,1),col="white")
abline(h=0,v=0)
for(li in 1:length(ls)){
l <- ls[li]
mod <- getDs(M,l)
ds[li,] <- mod$d
ns[li] <- mod$n1
mod <- getDs(M,l)
D_in0 <- abs(mod$comps%*%D0_m)
points(D_in0[,1],D_in0[,2],pch=16)
}
M
plot(ls,ns)
matplot(ls,ds,type="l")
M<- matrix(c(0.68,0.21,0.001,0.66,0.1,0.004,0.230,0.65,0.03,0.61),byrow = T,nrow = 2)
getDs <- function(M0,l){
M <- abs(M0) - l
M[which(M<0)] <- 0
M <- sign(M0)*M
pos0 <- which(svd(M)$v[,1]!=0)
L00 <- 0
if(length(pos0)>0){
L00 <- length(pos0)
}
list(d=svd(M)$d,n1=L00,comps=M%*%svd(M)$v,M=M)
}
ls <- seq(0,1,length.out = 10000)
ds <- matrix(NA,length(ls),2)
ns <- rep(NA,length(ls))
mod0 <- getDs(M,0)
D0<-mod0$comps
D0_m<-solve(mod0$comps)
plot(c(0),c(0),xlim=c(0,1),ylim=c(0,1),col="white")
abline(h=0,v=0)
for(li in 1:length(ls)){
l <- ls[li]
mod <- getDs(M,l)
ds[li,] <- mod$d
ns[li] <- mod$n1
mod <- getDs(M,l)
D_in0 <- abs(mod$comps%*%D0_m)
points(D_in0[,1],D_in0[,2],pch=16)
}
M
plot(ls,ns)
matplot(ls,ds,type="l")
sqrt(0.824)
(0.824)^2
0.8^2
plot(1:10)
library(mixOmics)
data(liver.toxicity)
X <- liver.toxicity$gene
Y <- liver.toxicity$clinic
mod <- spls(X, Y, ncomp = 1, keepX = 50,keepY = 10)
data(liver.toxicity)
X <- scale(liver.toxicity$gene)
Y <- scale(liver.toxicity$clinic)
mod <- spls(X, Y, ncomp = 1, keepX = 50,keepY = 10)
aa <- predict(mod,X)
aa$B.hat
a <- crossprod(mod$variates$X,mod$variates$Y)/crossprod(mod$variates$X)
a
a <- as.numeric(crossprod(mod$variates$X,mod$variates$Y)/crossprod(mod$variates$X))
a
B <- a*tcrossprod(mod$loadings$X,mod$loadings$Y)
plot(as.vector(B),as.vector(aa$B.hat))
plot(as.vector(B),as.vector(aa$B.hat));abline(0,1)
sum(abs(as.vector(B)-as.vector(aa$B.hat))))
sum(abs(as.vector(B)-as.vector(aa$B.hat)))
aa$predict
aa$predict[,,1]
data(liver.toxicity)
X <- scale(liver.toxicity$gene)
Y <- scale(liver.toxicity$clinic)
mod <- spls(X[-1,,drop=F], Y[-1,,drop=F], ncomp = 1, keepX = 50,keepY = 10)
data(liver.toxicity)
X <- scale(liver.toxicity$gene)
Y <- scale(liver.toxicity$clinic)
mod <- spls(X[-1,,drop=F], Y[-1,,drop=F], ncomp = 1, keepX = 50,keepY = 10)
a <- as.numeric(crossprod(mod$variates$X,mod$variates$Y)/crossprod(mod$variates$X))
B <- a*tcrossprod(mod$loadings$X,mod$loadings$Y)
data(liver.toxicity)
X <- scale(liver.toxicity$gene)
Y <- scale(liver.toxicity$clinic)
mod <- spls(X[-1,,drop=F], Y[-1,,drop=F], ncomp = 1, keepX = 50,keepY = 10)
a <- as.numeric(crossprod(mod$variates$X,mod$variates$Y)/crossprod(mod$variates$X))
B <- a*tcrossprod(mod$loadings$X,mod$loadings$Y)
print(pred <- predict(mod,X[1,,drop=F]))
print(pred_us <- (X[1,,drop=F]-colMeans(X[-1,,drop=F]))%*%B+colMeans(Y[-1,,drop=F]))
pred$predict
n <- nrow(X)
get_cov_th <- function(X,Y,l){
M0 <- crossprod(Y,X)/(n-1)
M <- abs(M0) - l
M[which(M<0)] <- 0
M <- sign(M0)*M
pos_0 <- which(colMeans(M)==0)
M[,-pos_0]
}
data(liver.toxicity)
X <- scale(liver.toxicity$gene)
Y <- scale(liver.toxicity$clinic)
mod <- spls(X[-1,,drop=F], Y[-1,,drop=F], ncomp = 2, keepX = 50,keepY = 10)
a <- as.numeric(crossprod(mod$variates$X,mod$variates$Y)/crossprod(mod$variates$X))
B <- a*tcrossprod(mod$loadings$X,mod$loadings$Y)
print(pred <- predict(mod,X[1,,drop=F]))
print(pred_us <- (X[1,,drop=F]-colMeans(X[-1,,drop=F]))%*%B+colMeans(Y[-1,,drop=F]))
plot(as.vector(B),as.vector(aa$B.hat));abline(0,1)
data(liver.toxicity)
X <- scale(liver.toxicity$gene)
Y <- scale(liver.toxicity$clinic)
mod <- spls(X[-1,,drop=F], Y[-1,,drop=F], ncomp = 2, keepX = 50,keepY = 10)
a <- as.numeric(crossprod(mod$variates$X,mod$variates$Y)/crossprod(mod$variates$X))
B <- a*tcrossprod(mod$loadings$X,mod$loadings$Y)
print(pred <- predict(mod,X[1,,drop=F]))
print(pred_us <- (X[1,,drop=F]-colMeans(X))%*%B+colMeans(Y[-1,,drop=F]))
data(liver.toxicity)
X <- scale(liver.toxicity$gene)
Y <- scale(liver.toxicity$clinic)
mod <- spls(X[-1,,drop=F], Y[-1,,drop=F], ncomp = 2, keepX = 50,keepY = 10)
a <- as.numeric(crossprod(mod$variates$X,mod$variates$Y)/crossprod(mod$variates$X))
B <- a*tcrossprod(mod$loadings$X,mod$loadings$Y)
print(pred <- predict(mod,X[1,,drop=F])$predict )
print(pred_us <- (X[1,,drop=F]-colMeans(X))%*%B+colMeans(Y[-1,,drop=F]))
data(liver.toxicity)
X <- scale(liver.toxicity$gene)
Y <- scale(liver.toxicity$clinic)
mod <- spls(X[-1,,drop=F], Y[-1,,drop=F], ncomp = 2, keepX = 50,keepY = 10)
a <- as.numeric(crossprod(mod$variates$X,mod$variates$Y)/crossprod(mod$variates$X))
B <- a*tcrossprod(mod$loadings$X,mod$loadings$Y)
print(pred <- predict(mod,X[1,,drop=F])$predict )
print(pred_us <- (X[1,,drop=F]-colMeans(X[-1,,drop=F]))%*%B+colMeans(Y[-1,,drop=F]))
dim(Y)
data(liver.toxicity)
X <- scale(liver.toxicity$gene)
Y <- scale(liver.toxicity$clinic)
mod <- spls(X[-1,,drop=F], Y[-1,,drop=F], ncomp = 1, keepX = 50,keepY = 10)
a <- as.numeric(crossprod(mod$variates$X,mod$variates$Y)/crossprod(mod$variates$X))
B <- a*tcrossprod(mod$loadings$X,mod$loadings$Y)
print(pred <- predict(mod,X[1,,drop=F])$predict )
print(pred_us <- (X[1,,drop=F]-colMeans(X[-1,,drop=F]))%*%B+colMeans(Y[-1,,drop=F]))
data(liver.toxicity)
X <- scale(liver.toxicity$gene)
Y <- scale(liver.toxicity$clinic)
mod <- spls(X[-1,,drop=F], Y[-1,,drop=F], ncomp = 1, keepX = 50,keepY = 10)
a <- as.numeric(crossprod(mod$variates$X,mod$variates$Y)/crossprod(mod$variates$X))
B <- a*tcrossprod(mod$loadings$X,mod$loadings$Y)
print(pred <- predict(mod,X[1,,drop=F])$predict )
print(pred_us <- (X[1,,drop=F]-colMeans(X))%*%B+colMeans(Y[-1,,drop=F]))
hist(colMeans(X))
MddsPLS
crossprod(matrix(1,3,5),matrix(1,2,5))
crossprod(matrix(rep(1,3*5),3,5),matrix(rep(1,10),2,5))
\mathcal{K}_i &= &\{t\in 1..T|\mathbf{X}_{t|i|.}\text{ is missing}\}
matrix(rep(1,3*5),3,5)
matrix(rep(1,10),2,5)
plot(seq(0,1,100),seq(0,1,100)^0.1)
plot(seq(0,1,length.out = 100),seq(0,1,length.out = 100)^0.1)
plot(seq(0,1,length.out = 100),seq(0,1,length.out = 100)^0.5)
plot(seq(0,1,length.out = 100),seq(0,1,length.out = 100)^0.9)
library(devtools)
install_github("hlorenzo/ddsPLS")
remove.packages("ddsPLS", lib="~/R/win-library/3.4")
install_github("hlorenzo/ddsPLS")
remove.packages("ddsPLS", lib="~/R/win-library/3.4")
remove.packages("ddsPLS", lib="~/R/win-library/3.4")
library(devtools)
install_github("hlorenzo/ddsPLS")
remove.packages("ddsPLS", lib="~/R/win-library/3.4")
library(devtools)
install_github("hlorenzo/ddsPLS")
library(ddsPLS)
vignette(ddsPLS)
vignette("ddsPLS")
remove.packages("ddsPLS", lib="~/R/win-library/3.4")
devtools::install_github(repo = "hlorenzo/ddsPLS",build_vignettes = TRUE)
library(ddsPLS)
library(ddsPLS)
?mddsPLS
library("ade4")
data("chickenk"'
)
data("chickenk")
Mortality <- chickenk[[1]]
dudiY.chick <- dudi.pca(Mortality, center = TRUE, scale = TRUE, scannf =
FALSE)
ktabX.chick <- ktab.list.df(chickenk[2:5])
resmbpls.chick <- mbpls(dudiY.chick, ktabX.chick, scale = TRUE,
option = "uniform", scannf = FALSE)
summary(resmbpls.chick)
if(adegraphicsLoaded())
plot(resmbpls.chick)
adegraphicsLoaded()
library(adegraphics)
install.packages("adegraphics")
library("adegraphics")
ktabX.chick <- ktab.list.df(chickenk[2:5])
resmbpls.chick <- mbpls(dudiY.chick, ktabX.chick, scale = TRUE,
option = "uniform", scannf = FALSE)
summary(resmbpls.chick)
if(adegraphicsLoaded())
plot(resmbpls.chick)
library(chickenk)
data(chickenk)
Y <- scale(chickenk$Mortality)
corrplot::corrplot(cor(Y))
length(chickenk)
Xs <- chickenk[-1]
length(Xs)
library(ddsPLS)
install.packages("reticulate")
library(reticulate)
source("https://bioconductor.org/biocLite.R")
biocLite("Biobase")
source("https://bioconductor.org/biocLite.R")
biocLite("BiocGenerics")
load("Z:/ddsPLS/simu_n100_ALLpercent_9_9_error.RData")
ALL_MATS
load("Z:/ddsPLS/simu_n100_ALLpercent_9_9100simu_error.RData")
ALL_MATS
length(ALL_MATS)
sink("aaa.txt")
sink()
sink("aaa.txt")
sink("aaa.txt")
print("aa")
sink()
sink()
load("Z:/ddsPLS/simu_n100_ALLpercent_9_9100simu_error.RData")
ALL_MATS
load("Z:/ddsPLS/simu_n100_ALLpercent_9_9100simu_error.RData")
ALL_MATS
load("Z:/ddsPLS/simu_n100_ALLpercent_9_9100simu_error.RData")
ALL_MATS
load("Z:/ddsPLS/simu_n100_ALLpercent_9_9100simu_error.RData")
ncol(na.omit(ALL_MATS[[1]]))
load("Z:/ddsPLS/simu_n100_ALLpercent_9_9100simu_error.RData")
nrow(na.omit(ALL_MATS[[1]]))
load("Z:/ddsPLS/simu_n100_ALLpercent_9_9100simu_error.RData")
nrow(na.omit(ALL_MATS[[1]]))
load("Z:/ddsPLS/simu_n100_ALLpercent_9_9100simu_error.RData")
nrow(na.omit(ALL_MATS[[1]]))
load("Z:/ddsPLS/simu_n100_ALLpercent_9_9100simu_error.RData")
nrow(na.omit(ALL_MATS[[1]]))
load("Z:/ddsPLS/simu_n100_ALLpercent_9_9100simu_error.RData")
length((ALL_MATS)
nrow(na.omit(ALL_MATS[[1]]))
load("Z:/ddsPLS/simu_n100_ALLpercent_9_9100simu_error.RData")
length(ALL_MATS)
nrow(na.omit(ALL_MATS[[1]]))
list.files()
getwd()
data<-read.csv2("../Desktop/tete.csv")
data<-read.csv2("../Desktop/tete.csv")
View(data)
table(data)
glm(Y ~.,family=binomial(link='logit'),data=data)
log(29/(86+29)/(1-29/(86+29))
)
log(29/86)
install_hugo(force = TRUE)
library(blogdown)
install_hugo(force = TRUE)
new_site(theme="olOwOlo/hugo-theme-even")
new_site(theme="jhu247/minimal-academic")
setwd("../Documents/")
setwd("blog_test/")
new_site(theme="jhu247/minimal-academic")
new_site(theme="olOwOlo/hugo-theme-even")
setwd("../../Dropbox/blog_academic/")
new_site(theme="olOwOlo/hugo-theme-even")
new_site(theme="lambdafu/hugo-finite")
new_site(theme="TiTi/hurock")
serve_site()
new_post(title="Teaching", rmd = TRUE)
new_post(title="Test ok")
blogdown:::new_post_addin()
blogdown:::new_post_addin()
new_site(theme="gcushen/hugo-academic")
library(blogdown)
serve_site()
serve_site()
serve_stop_server()
stop_server()
serve_site()
stop_server()
serve_site()
stop_server()
serve_site()
stop_server()
serve_site()
stop_server()
serve_site()
stop_server()
serve_site()
serve_site()
serve_site()
stop_server()
serve_site()
serve_site()
stop_server()
serve_site()
serve_site()
serve_site()
serve_site()
serve_site()
stop_server()
serve_site()
serve_site()
serve_site()
serve_site()
stop_server()
serve_site()
serve_site()
serve_site()
library(blogdown)
serve_site()
serve_site()
blogdown::stop_server()
serve_site()
serve_site()
stop_server()
library(blogdown)
serve_site()
serve_site()
servr::daemon_stop("222024152")
serve_site()
blogdown::serve_site()
blogdown::serve_site()
library(blogdown)
blogdowstop_server()
stop_server()
serve_site()
stop_server()
serve_site()
stop_server()
serve_site()
stop_server()
serve_site()
stop_server()
serve_site()
stop_server()
library(blogdow)
library(blogdown)
serve_site()
stop_serve()
stop_server()
serve_site()
stop_server()
